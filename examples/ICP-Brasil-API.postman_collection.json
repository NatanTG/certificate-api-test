{
  "info": {
    "name": "üîê API ICP-Brasil - Assinatura Digital",
    "description": "# üìã Collection Completa - API de Assinatura Digital ICP-Brasil\n\n> **Collection oficial** para testar e integrar com a API de assinatura digital compat√≠vel com padr√µes **ICP-Brasil** (PKCS#7/CAdES)\n\n---\n\n## üöÄ Quick Start\n\n### 1Ô∏è‚É£ Configurar Ambiente\n- Execute: `Setup & Auth > Environment Setup`\n- Altere vari√°vel `current_environment` se necess√°rio\n- Ambientes: `development`, `production`, `staging`\n\n### 2Ô∏è‚É£ Autenticar\n- Execute: `Setup & Auth > Health Check`\n- Execute: `Setup & Auth > Login`\n\n### 3Ô∏è‚É£ Fluxo Completo\n1. `Documents Management > Upload Document`\n2. `Digital Signature > Sign Document with ICP-Brasil`\n3. `Document Verification > Verify Document Signatures`\n4. `Document Verification > Detailed Signature Validation`\n5. `Documents Management > Download Signed Document`\n\n---\n\n## üîß Configura√ß√µes\n\n### **Vari√°veis Principais**\n| Vari√°vel | Descri√ß√£o | Valor Padr√£o |\n|----------|-----------|-------------|\n| `base_url` | URL da API | `http://localhost:3000/api` |\n| `current_environment` | Ambiente atual | `development` |\n| `test_user_email` | Email de teste | `admin@test.com` |\n| `hash_algorithm` | Algoritmo de hash | `SHA-256` |\n\n### **Ambientes Suportados**\n- üîß **Development**: `localhost:3000` (desenvolvimento local)\n- üê≥ **Production**: `localhost:80` (Docker produ√ß√£o)\n- üåê **Staging**: Personaliz√°vel para homologa√ß√£o\n\n---\n\n## üìä Funcionalidades\n\n### ‚úÖ **Autentica√ß√£o JWT**\n- Login/logout autom√°tico\n- Token persistente entre requests\n- Renova√ß√£o autom√°tica\n\n### ‚úÖ **Gest√£o de Documentos**\n- Upload seguro (PDF, DOC, TXT)\n- Listagem com filtros\n- Download de documentos assinados (.p7s)\n\n### ‚úÖ **Assinatura Digital ICP-Brasil**\n- Certificados A1, A3, A4\n- Algoritmos: SHA-256, SHA-384, SHA-512\n- Valida√ß√£o completa da cadeia\n- Verifica√ß√£o de LCR em tempo real\n\n### ‚úÖ **Verifica√ß√£o Avan√ßada**\n- Valida√ß√£o de assinaturas\n- An√°lise detalhada de certificados\n- Relat√≥rios de conformidade\n- M√©tricas de performance\n\n### ‚úÖ **Automa√ß√£o & Testes**\n- Fluxo completo automatizado\n- Testes de performance\n- Processamento em lote\n- Cen√°rios de erro\n\n---\n\n## üìÅ Arquivos Necess√°rios\n\n### **Para Upload**\n- `examples/test-document.pdf` - Documento de teste\n\n### **Para Assinatura**\n- `examples/test-certificate.p12` - Certificado ICP-Brasil\n- Senha padr√£o: `test123` (configur√°vel)\n\n---\n\n## üõ†Ô∏è Troubleshooting\n\n### **Problemas Comuns**\n\n#### ‚ùå \"Token n√£o encontrado\"\n- **Solu√ß√£o**: Execute `Setup & Auth > Login` primeiro\n\n#### ‚ùå \"API indispon√≠vel\"\n- **Solu√ß√£o**: Verifique se a API est√° rodando\n- **Comando**: `make dev` ou `npm run start:dev`\n\n#### ‚ùå \"Certificado inv√°lido\"\n- **Solu√ß√£o**: Use certificado ICP-Brasil v√°lido (.p12/.pfx)\n- **Verificar**: Data de validade e senha\n\n#### ‚ùå \"Erro de ambiente\"\n- **Solu√ß√£o**: Execute `Setup & Auth > Environment Setup`\n- **Verificar**: Vari√°vel `current_environment`\n\n---\n\n## üìû Suporte\n\n### **Documenta√ß√£o Completa**\n- üìñ [API-USAGE.md](./API-USAGE.md) - Guia detalhado\n- üìã [README.md](./README.md) - Instru√ß√µes de instala√ß√£o\n- üê≥ [Docker Guide](./DOCKER-COLLECTION-SUMMARY.md) - Deploy e produ√ß√£o\n\n### **Recursos T√©cnicos**\n- üèõÔ∏è [ITI - Instituto Nacional de TI](https://iti.gov.br)\n- üìú [Padr√µes ICP-Brasil](https://www.gov.br/iti/pt-br)\n- üîç [Swagger UI](http://localhost:3000/api/docs) - Documenta√ß√£o interativa\n\n---\n\n**‚ö° Collection criada automaticamente pela API ICP-Brasil**  \n**ü§ñ Gerada com [Claude Code](https://claude.ai/code)**",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global executado antes de cada requisi√ß√£o",
          "// Verificar se temos token para requests autenticados",
        "const authRequiredEndpoints = [",
          "    '/documents/',",
          "    '/users/',",
          "    '/auth/logout'",
          "];",
          "",
          "const currentUrl = pm.request.url.toString();",
          "const needsAuth = authRequiredEndpoints.some(endpoint => currentUrl.includes(endpoint));",
          "",
          "if (needsAuth && !pm.globals.get('token')) {",
          "    console.log('‚ö†Ô∏è Token n√£o encontrado. Execute o login primeiro.');",
          "}",
          "",
          "// Log da requisi√ß√£o",
          "console.log(`üåê ${pm.request.method} ${pm.request.url}`);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global executado ap√≥s cada resposta",
          "",
          "// Log da resposta",
          "console.log(`${pm.response.code} ${pm.response.status}`);",
          "",
          "// Verifica√ß√µes b√°sicas",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('‚úÖ Sucesso');",
          "} else {",
          "    console.log('‚ùå Erro:', pm.response.json().message || 'Erro desconhecido');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string",
      "description": "URL base da API (desenvolvimento local)"
    },
    {
      "key": "base_url_prod",
      "value": "http://localhost/api",
      "type": "string",
      "description": "URL base da API (produ√ß√£o Docker)"
    },
    {
      "key": "base_url_staging",
      "value": "https://staging-icp.exemplo.com/api",
      "type": "string",
      "description": "URL base da API (ambiente de staging)"
    },
    {
      "key": "token",
      "value": "",
      "type": "string",
      "description": "Token JWT de autentica√ß√£o (preenchido automaticamente)"
    },
    {
      "key": "document_id",
      "value": "",
      "type": "string",
      "description": "ID do documento (preenchido ap√≥s upload)"
    },
    {
      "key": "signature_id",
      "value": "",
      "type": "string",
      "description": "ID da assinatura (preenchido ap√≥s assinatura)"
    },
    {
      "key": "test_user_email",
      "value": "admin@test.com",
      "type": "string",
      "description": "Email do usu√°rio de teste"
    },
    {
      "key": "test_user_password",
      "value": "admin123",
      "type": "string",
      "description": "Senha do usu√°rio de teste"
    },
    {
      "key": "certificate_password",
      "value": "test123",
      "type": "string",
      "description": "Senha padr√£o do certificado de teste"
    },
    {
      "key": "hash_algorithm",
      "value": "SHA-256",
      "type": "string",
      "description": "Algoritmo de hash padr√£o (SHA-256, SHA-384, SHA-512)"
    },
    {
      "key": "max_file_size",
      "value": "52428800",
      "type": "string",
      "description": "Tamanho m√°ximo de arquivo em bytes (50MB)"
    },
    {
      "key": "api_timeout",
      "value": "30000",
      "type": "string",
      "description": "Timeout para requisi√ß√µes da API em ms"
    },
    {
      "key": "current_environment",
      "value": "development",
      "type": "string",
      "description": "Ambiente atual (development, production, staging)"
    }
  ],
  "item": [
    {
      "name": "Setup & Auth",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API est√° dispon√≠vel', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Resposta √© texto', function () {",
                  "    pm.response.to.be.text;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Verificar se a API est√° dispon√≠vel e funcionando"
          }
        },
        {
          "name": "Environment Setup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Script para configura√ß√£o de ambiente",
                  "console.log('‚öôÔ∏è Configurando ambiente da API...');",
                  "",
                  "// Op√ß√µes de ambiente dispon√≠veis",
                  "const environments = {",
                  "    development: pm.collectionVariables.get('base_url'),",
                  "    production: pm.collectionVariables.get('base_url_prod'),",
                  "    staging: pm.collectionVariables.get('base_url_staging')",
                  "};",
                  "",
                  "// Mostrar configura√ß√µes atuais",
                  "console.log('üèóÔ∏è Ambientes dispon√≠veis:');",
                  "console.log('========================');",
                  "Object.entries(environments).forEach(([env, url]) => {",
                  "    const current = pm.collectionVariables.get('current_environment') === env ? ' ‚Üê ATUAL' : '';",
                  "    console.log(`${env}: ${url}${current}`);",
                  "});",
                  "",
                  "// Configura√ß√µes atuais",
                  "const currentConfig = {",
                  "    environment: pm.collectionVariables.get('current_environment'),",
                  "    base_url: pm.collectionVariables.get('base_url'),",
                  "    user: pm.collectionVariables.get('test_user_email'),",
                  "    hash_algorithm: pm.collectionVariables.get('hash_algorithm'),",
                  "    timeout: pm.collectionVariables.get('api_timeout')",
                  "};",
                  "",
                  "console.log('\\nüîß Configura√ß√£o atual:');",
                  "console.log('=====================');",
                  "Object.entries(currentConfig).forEach(([key, value]) => {",
                  "    console.log(`${key}: ${value}`);",
                  "});",
                  "",
                  "console.log('\\n‚úÖ Configura√ß√£o de ambiente conclu√≠da!');",
                  "console.log('üí° Para alterar o ambiente, modifique a vari√°vel \"current_environment\"');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Configurar e verificar ambiente da API\\n\\n**Ambientes dispon√≠veis:**\\n- development: Desenvolvimento local (porta 3000)\\n- production: Docker produ√ß√£o (porta 80)\\n- staging: Ambiente de homologa√ß√£o\\n\\n**Como alterar:**\\n1. V√° em Variables da Collection\\n2. Altere o valor de 'current_environment'\\n3. Execute este request novamente\\n\\n**Vari√°veis configur√°veis:**\\n- URLs dos ambientes\\n- Credenciais de teste\\n- Timeouts\\n- Algoritmos de hash"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login bem-sucedido', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token recebido', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    ",
                  "    // Salvar token para uso posterior",
                  "    pm.globals.set('token', jsonData.access_token);",
                  "    pm.collectionVariables.set('token', jsonData.access_token);",
                  "    ",
                  "    console.log('üîê Token salvo:', jsonData.access_token.substring(0, 20) + '...');",
                  "});",
                  "",
                  "pm.test('Dados do usu√°rio retornados', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Realizar login na API e obter token JWT"
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout bem-sucedido', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Mensagem de confirma√ß√£o', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "// Limpar token ap√≥s logout",
                  "pm.globals.unset('token');",
                  "pm.collectionVariables.set('token', '');",
                  "console.log('üö™ Token removido ap√≥s logout');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            },
            "description": "Realizar logout da API"
          }
        }
      ],
      "description": "Endpoints para configura√ß√£o inicial e autentica√ß√£o"
    },
    {
      "name": "Documents Management",
      "item": [
        {
          "name": "Upload Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Upload bem-sucedido', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Document ID retornado', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documentId');",
                  "    ",
                  "    // Salvar document ID para uso posterior",
                  "    pm.globals.set('document_id', jsonData.documentId);",
                  "    pm.collectionVariables.set('document_id', jsonData.documentId);",
                  "    ",
                  "    console.log('üìÑ Document ID salvo:', jsonData.documentId);",
                  "});",
                  "",
                  "pm.test('Dados do arquivo retornados', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('filename');",
                  "    pm.expect(jsonData).to.have.property('hash');",
                  "    pm.expect(jsonData).to.have.property('size');",
                  "    pm.expect(jsonData).to.have.property('uploadedAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "examples/test-document.pdf",
                  "description": "Arquivo para upload (PDF, DOC, TXT)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "documents",
                "upload"
              ]
            },
            "description": "Fazer upload de um documento para posterior assinatura\n\n**Instru√ß√µes:**\n1. Clique em 'Body' > 'form-data'\n2. Selecione 'File' no campo 'file'\n3. Escolha um arquivo PDF, DOC ou TXT\n4. Execute a requisi√ß√£o\n\n**Formatos aceitos:** PDF, DOC, DOCX, TXT\n**Tamanho m√°ximo:** 50MB"
          }
        },
        {
          "name": "List My Documents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Listagem bem-sucedida', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Array de documentos retornado', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "    pm.expect(jsonData.documents).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Estrutura dos documentos v√°lida', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.documents.length > 0) {",
                  "        const doc = jsonData.documents[0];",
                  "        pm.expect(doc).to.have.property('id');",
                  "        pm.expect(doc).to.have.property('filename');",
                  "        pm.expect(doc).to.have.property('uploadedAt');",
                  "        pm.expect(doc).to.have.property('signaturesCount');",
                  "    }",
                  "});",
                  "",
                  "// Log da quantidade de documentos",
                  "const jsonData = pm.response.json();",
                  "console.log(`üìã ${jsonData.documents.length} documento(s) encontrado(s)`);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/my-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "my-documents"
              ]
            },
            "description": "Listar todos os documentos do usu√°rio autenticado"
          }
        },
        {
          "name": "Download Signed Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Download bem-sucedido', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Arquivo bin√°rio recebido', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/octet-stream');",
                  "});",
                  "",
                  "pm.test('Header de download presente', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});",
                  "",
                  "// Log do tamanho do arquivo",
                  "const contentLength = pm.response.headers.get('Content-Length');",
                  "if (contentLength) {",
                  "    console.log(`üì• Arquivo baixado: ${contentLength} bytes`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/download/signed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "documents",
                "{{document_id}}",
                "download",
                "signed"
              ]
            },
            "description": "Baixar documento com todas as assinaturas digitais embarcadas (formato P7S)\n\n**Nota:** O document_id √© preenchido automaticamente ap√≥s o upload.\nSe n√£o funcionar, copie o ID manualmente da resposta do upload."
          }
        }
      ],
      "description": "Endpoints para gest√£o de documentos (upload, listagem, download)"
    },
    {
      "name": "Digital Signature",
      "item": [
        {
          "name": "Sign Document with ICP-Brasil",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Assinatura bem-sucedida', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Signature ID retornado', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('signatureId');",
                  "    ",
                  "    // Salvar signature ID",
                  "    pm.globals.set('signature_id', jsonData.signatureId);",
                  "    pm.collectionVariables.set('signature_id', jsonData.signatureId);",
                  "    ",
                  "    console.log('üîê Signature ID salvo:', jsonData.signatureId);",
                  "});",
                  "",
                  "pm.test('Informa√ß√µes do certificado retornadas', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('certificateInfo');",
                  "    pm.expect(jsonData.certificateInfo).to.have.property('subject');",
                  "    pm.expect(jsonData.certificateInfo).to.have.property('issuer');",
                  "    pm.expect(jsonData.certificateInfo).to.have.property('serialNumber');",
                  "});",
                  "",
                  "pm.test('Data de assinatura presente', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('signedAt');",
                  "});",
                  "",
                  "pm.test('Padr√£o ICP-Brasil confirmado', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('standard');",
                  "    pm.expect(jsonData.standard).to.eql('ICP-Brasil');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "certificate",
                  "type": "file",
                  "src": "examples/test-certificate.p12",
                  "description": "Certificado ICP-Brasil (.p12 ou .pfx)"
                },
                {
                  "key": "certificatePassword",
                  "value": "{{certificate_password}}",
                  "type": "text",
                  "description": "Senha do certificado digital"
                },
                {
                  "key": "hashAlgorithm",
                  "value": "{{hash_algorithm}}",
                  "type": "text",
                  "description": "Algoritmo de hash (SHA-256, SHA-384, SHA-512)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/sign-icp",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "documents",
                "{{document_id}}",
                "sign-icp"
              ]
            },
            "description": "Assinar documento usando certificado digital ICP-Brasil\n\n**Instru√ß√µes:**\n1. Fa√ßa upload de um documento primeiro\n2. Configure os campos no Body:\n   - certificate: Selecione seu certificado .p12/.pfx\n   - certificatePassword: Digite a senha do certificado\n   - hashAlgorithm: Deixe SHA-256 (padr√£o)\n\n**Formatos aceitos:** .p12, .pfx\n**Algoritmos:** SHA-256, SHA-384, SHA-512"
          }
        }
      ],
      "description": "Endpoints para assinatura digital com certificados ICP-Brasil"
    },
    {
      "name": "Document Verification",
      "item": [
        {
          "name": "Verify Document Signatures",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Verifica√ß√£o bem-sucedida', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Informa√ß√µes do documento retornadas', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documentId');",
                  "    pm.expect(jsonData).to.have.property('documentHash');",
                  "    pm.expect(jsonData).to.have.property('totalSignatures');",
                  "});",
                  "",
                  "pm.test('Array de assinaturas presente', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('signatures');",
                  "    pm.expect(jsonData.signatures).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Estrutura das assinaturas v√°lida', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.signatures.length > 0) {",
                  "        const sig = jsonData.signatures[0];",
                  "        pm.expect(sig).to.have.property('signatureId');",
                  "        pm.expect(sig).to.have.property('certificateInfo');",
                  "        pm.expect(sig).to.have.property('isValid');",
                  "        pm.expect(sig).to.have.property('validationDetails');",
                  "        pm.expect(sig).to.have.property('signedAt');",
                  "    }",
                  "});",
                  "",
                  "// Log das assinaturas encontradas",
                  "const jsonData = pm.response.json();",
                  "console.log(`üîç ${jsonData.totalSignatures} assinatura(s) encontrada(s)`);",
                  "",
                  "jsonData.signatures.forEach((sig, index) => {",
                  "    console.log(`üîê Assinatura ${index + 1}:`);",
                  "    console.log(`  V√°lida: ${sig.isValid}`);",
                  "    console.log(`  Signat√°rio: ${sig.certificateInfo.subject}`);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/documents/{{document_id}}/verify",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "documents",
                "{{document_id}}",
                "verify"
              ]
            },
            "description": "Verificar todas as assinaturas digitais de um documento\n\nRetorna informa√ß√µes detalhadas sobre:\n- Validade das assinaturas\n- Informa√ß√µes dos certificados\n- Cadeia de certifica√ß√£o\n- Status de revoga√ß√£o\n- Validade temporal"
          }
        }
        ,
        {
          "name": "Detailed Signature Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Valida√ß√£o detalhada bem-sucedida', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Informa√ß√µes detalhadas retornadas', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('signatureId');",
                  "    pm.expect(jsonData).to.have.property('isValid');",
                  "    pm.expect(jsonData).to.have.property('validationDetails');",
                  "});",
                  "",
                  "pm.test('Detalhes de certifica√ß√£o presentes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const details = jsonData.validationDetails;",
                  "    pm.expect(details).to.have.property('certificateChain');",
                  "    pm.expect(details).to.have.property('revocationStatus');",
                  "    pm.expect(details).to.have.property('timeValidation');",
                  "    pm.expect(details).to.have.property('trustAnchor');",
                  "});",
                  "",
                  "pm.test('Informa√ß√µes ICP-Brasil espec√≠ficas', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('icpBrasilInfo');",
                  "    const icpInfo = jsonData.icpBrasilInfo;",
                  "    pm.expect(icpInfo).to.have.property('policyOID');",
                  "    pm.expect(icpInfo).to.have.property('certificateLevel');",
                  "});",
                  "",
                  "// Log detalhado da valida√ß√£o",
                  "const jsonData = pm.response.json();",
                  "console.log('üîç Valida√ß√£o Detalhada:');",
                  "console.log('====================');",
                  "console.log(`‚úÖ V√°lida: ${jsonData.isValid}`);",
                  "console.log(`üîó Cadeia OK: ${jsonData.validationDetails.certificateChain.isValid}`);",
                  "console.log(`‚ùå Revogada: ${jsonData.validationDetails.revocationStatus.isRevoked}`);",
                  "console.log(`‚è∞ Tempo OK: ${jsonData.validationDetails.timeValidation.isValid}`);",
                  "console.log(`üèõÔ∏è AC-Raiz: ${jsonData.validationDetails.trustAnchor.isICPBrasil}`);",
                  "console.log(`üìú N√≠vel: ${jsonData.icpBrasilInfo.certificateLevel}`);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"includeChain\\\": true,\\n  \\\"validateRevocation\\\": true,\\n  \\\"includeTimestamp\\\": true\\n}"
            },
            "url": {
              "raw": "{{base_url}}/signatures/{{signature_id}}/validate-detailed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "signatures",
                "{{signature_id}}",
                "validate-detailed"
              ]
            },
            "description": "Realizar valida√ß√£o detalhada de uma assinatura espec√≠fica\\n\\n**Inclui:**\\n- Valida√ß√£o completa da cadeia de certifica√ß√£o\\n- Verifica√ß√£o de status de revoga√ß√£o (LCR)\\n- Valida√ß√£o temporal\\n- Informa√ß√µes espec√≠ficas ICP-Brasil\\n- Detalhes t√©cnicos da assinatura\\n\\n**Op√ß√µes no body:**\\n- includeChain: Incluir detalhes da cadeia\\n- validateRevocation: Verificar revoga√ß√£o\\n- includeTimestamp: Incluir valida√ß√£o de timestamp"
          }
        }
      ],
      "description": "Endpoints para verifica√ß√£o de assinaturas digitais"
    },
    {
      "name": "Testing Scenarios",
      "item": [
        {
          "name": "Complete Flow Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Este √© um teste do fluxo completo",
                  "// Execute os requests em ordem:",
                  "// 1. Login",
                  "// 2. Upload Document",
                  "// 3. Sign Document",
                  "// 4. Verify Document",
                  "// 5. Download Document",
                  "",
                  "console.log('üß™ Executando teste do fluxo completo');",
                  "",
                  "// Verificar se temos os IDs necess√°rios",
                  "const token = pm.globals.get('token');",
                  "const documentId = pm.globals.get('document_id');",
                  "",
                  "if (!token) {",
                  "    throw new Error('‚ùå Token n√£o encontrado. Execute o Login primeiro.');",
                  "}",
                  "",
                  "if (!documentId) {",
                  "    throw new Error('‚ùå Document ID n√£o encontrado. Fa√ßa upload de um documento primeiro.');",
                  "}",
                  "",
                  "console.log('‚úÖ Pr√©-requisitos OK');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Testes espec√≠ficos do fluxo completo",
                  "pm.test('Fluxo executado com sucesso', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Relat√≥rio final",
                  "const token = pm.globals.get('token');",
                  "const documentId = pm.globals.get('document_id');",
                  "const signatureId = pm.globals.get('signature_id');",
                  "",
                  "console.log('üìä Relat√≥rio do Fluxo Completo:');",
                  "console.log('================================');",
                  "console.log(`üîê Token: ${token ? '‚úÖ OK' : '‚ùå Ausente'}`);",
                  "console.log(`üìÑ Document ID: ${documentId || 'N/A'}`);",
                  "console.log(`üñãÔ∏è  Signature ID: ${signatureId || 'N/A'}`);",
                  "",
                  "if (token && documentId) {",
                  "    console.log('üéâ Fluxo b√°sico completo!');",
                  "    if (signatureId) {",
                  "        console.log('üéâ Fluxo de assinatura tamb√©m completo!');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/my-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "my-documents"
              ]
            },
            "description": "Endpoint para testar se o fluxo completo foi executado corretamente\n\n**Como usar:**\n1. Execute todos os requests anteriores em ordem\n2. Execute este request para verificar o status\n3. Veja o console para o relat√≥rio completo\n\n**Ordem recomendada:**\n1. Setup & Auth > Health Check\n2. Setup & Auth > Login\n3. Documents Management > Upload Document\n4. Digital Signature > Sign Document with ICP-Brasil\n5. Document Verification > Verify Document Signatures\n6. Document Verification > Detailed Signature Validation\n7. Documents Management > Download Signed Document"
          }
        },
        {
          "name": "Batch Document Processing Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Script para teste de processamento em lote",
                  "console.log('üöÄ Iniciando teste de processamento em lote');",
                  "",
                  "// Verificar token",
                  "const token = pm.globals.get('token');",
                  "if (!token) {",
                  "    throw new Error('‚ùå Token n√£o encontrado. Execute o Login primeiro.');",
                  "}",
                  "",
                  "// Configurar contador de documentos",
                  "pm.globals.set('batch_test_documents', '[]');",
                  "pm.globals.set('batch_test_count', 0);",
                  "",
                  "console.log('‚úÖ Configura√ß√£o inicial do lote OK');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Processamento em lote funcionando', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Processar documentos encontrados",
                  "const jsonData = pm.response.json();",
                  "const documents = jsonData.documents || [];",
                  "",
                  "pm.test('Documentos encontrados para lote', function () {",
                  "    pm.expect(documents).to.be.an('array');",
                  "});",
                  "",
                  "// An√°lise estat√≠stica dos documentos",
                  "const stats = {",
                  "    total: documents.length,",
                  "    signed: documents.filter(doc => doc.isFullySigned).length,",
                  "    unsigned: documents.filter(doc => !doc.isFullySigned).length,",
                  "    withSignatures: documents.filter(doc => doc.signaturesCount > 0).length",
                  "};",
                  "",
                  "console.log('üìä Estat√≠sticas do Lote:');",
                  "console.log('=====================');",
                  "console.log(`üìÑ Total de documentos: ${stats.total}`);",
                  "console.log(`‚úÖ Totalmente assinados: ${stats.signed}`);",
                  "console.log(`‚ö†Ô∏è N√£o assinados: ${stats.unsigned}`);",
                  "console.log(`üîê Com assinaturas: ${stats.withSignatures}`);",
                  "",
                  "// Salvar estat√≠sticas",
                  "pm.globals.set('batch_stats', JSON.stringify(stats));",
                  "",
                  "if (stats.total > 0) {",
                  "    console.log('üéâ Teste de lote bem-sucedido!');",
                  "} else {",
                  "    console.log('‚ÑπÔ∏è Nenhum documento encontrado para teste em lote');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/my-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "my-documents"
              ]
            },
            "description": "Teste avan√ßado para processamento em lote de documentos\\n\\n**Funcionalidades:**\\n- An√°lise estat√≠stica de documentos\\n- Valida√ß√£o de lotes\\n- Relat√≥rio detalhado de status\\n- Prepara√ß√£o para automa√ß√£o"
          }
        },
        {
          "name": "Performance & Load Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Performance test setup",
                  "pm.globals.set('performance_start_time', Date.now());",
                  "console.log('‚ö° Iniciando teste de performance');",
                  "",
                  "// Verificar token",
                  "const token = pm.globals.get('token');",
                  "if (!token) {",
                  "    throw new Error('‚ùå Token necess√°rio para teste de performance');",
                  "}",
                  "",
                  "console.log('‚úÖ Setup de performance OK');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Calcular tempo de resposta",
                  "const startTime = pm.globals.get('performance_start_time');",
                  "const responseTime = Date.now() - startTime;",
                  "",
                  "pm.test('Resposta dentro do tempo esperado (<2s)', function () {",
                  "    pm.expect(responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('API responsiva', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Headers de performance presentes', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Length')).to.exist;",
                  "});",
                  "",
                  "// Log de m√©tricas de performance",
                  "console.log('üéØ M√©tricas de Performance:');",
                  "console.log('========================');",
                  "console.log(`‚è±Ô∏è Tempo total: ${responseTime}ms`);",
                  "console.log(`üöÄ Tempo Postman: ${pm.response.responseTime}ms`);",
                  "console.log(`üì¶ Tamanho resposta: ${pm.response.headers.get('Content-Length') || 'N/A'} bytes`);",
                  "console.log(`üåê Status: ${pm.response.code} ${pm.response.status}`);",
                  "",
                  "// Classifica√ß√£o de performance",
                  "let performance_rating;",
                  "if (responseTime < 500) performance_rating = 'üü¢ Excelente';",
                  "else if (responseTime < 1000) performance_rating = 'üü° Boa';",
                  "else if (responseTime < 2000) performance_rating = 'üü† Aceit√°vel';",
                  "else performance_rating = 'üî¥ Lenta';",
                  "",
                  "console.log(`üìä Avalia√ß√£o: ${performance_rating}`);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/my-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "my-documents"
              ]
            },
            "description": "Teste de performance e carga da API\\n\\n**Avalia:**\\n- Tempo de resposta\\n- Throughput\\n- Lat√™ncia\\n- Estabilidade\\n- M√©tricas detalhadas"
          }
        },
        {
          "name": "Error Scenarios - Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Erro 401 para credenciais inv√°lidas', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Mensagem de erro retornada', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "console.log('‚úÖ Teste de erro funcionando corretamente');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@test.com\",\n  \"password\": \"wrong_password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Testar cen√°rio de erro - login com credenciais inv√°lidas\n\nEste teste deve retornar erro 401 Unauthorized"
          }
        },
        {
          "name": "Error Scenarios - Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Erro 401 para acesso n√£o autorizado', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Mensagem de erro retornada', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "console.log('‚úÖ Prote√ß√£o de endpoint funcionando');"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/my-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "my-documents"
              ]
            },
            "description": "Testar cen√°rio de erro - acesso a endpoint protegido sem token\n\nEste teste deve retornar erro 401 Unauthorized"
          }
        }
      ],
      "description": "Cen√°rios de teste e valida√ß√£o da API"
    }
  ]
}